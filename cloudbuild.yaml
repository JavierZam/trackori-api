steps:
  # Step 1: replace firebaseConfig.js with the actual firebase config
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "const firebaseConfig = {" > /workspace/path/to/firebaseConfig.js
        echo "apiKey: \"$(gcloud secrets versions access latest --secret="firebase-api-key")\"," >> /workspace/path/to/firebaseConfig.js
        echo "authDomain: \"$(gcloud secrets versions access latest --secret="firebase-auth-domain")\"," >> /workspace/path/to/firebaseConfig.js
        echo "projectId: \"$(gcloud secrets versions access latest --secret="firebase-project-id")\"," >> /workspace/path/to/firebaseConfig.js
        echo "storageBucket: \"$(gcloud secrets versions access latest --secret="firebase-storage-bucket")\"," >> /workspace/path/to/firebaseConfig.js
        echo "messagingSenderId: \"$(gcloud secrets versions access latest --secret="firebase-messaging-sender-id")\"," >> /workspace/path/to/firebaseConfig.js
        echo "appId: \"$(gcloud secrets versions access latest --secret="firebase-app-id")\"," >> /workspace/path/to/firebaseConfig.js
        echo "measurementId: \"$(gcloud secrets versions access latest --secret="firebase-measurement-id")\"," >> /workspace/path/to/firebaseConfig.js
        echo "};" >> /workspace/path/to/firebaseConfig.js
        echo "" >> /workspace/path/to/firebaseConfig.js
        echo "module.exports = firebaseConfig;" >> /workspace/path/to/firebaseConfig.js

  # Step 2: build the docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/projectdicodingasik/userapitest', '.']

  # Step 3: push the docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/projectdicodingasik/userapitest']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'trackori-authentication-api', '--image', 'gcr.io/projectdicodingasik/userapitest', '--region', 'asia-southeast2', '--platform', 'managed', '--allow-unauthenticated']
